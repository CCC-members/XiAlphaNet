
%% Preprocessing of the Data

% Setup the environment and load necessary data
clear all ;
close all; 
setup;
load('Data\Atlas_Anatomical\tess_cortex_mid_high_8000V_fix.mat');
load('Data\Avarege_Conn&Tract_ROISpace\averageConnectivity_tractLengths.mat');
load('Data\Avarege_Conn&Tract_ROISpace\averageConnectivity_Fpt.mat');
load('Data\Model_Parameters\parameters.mat');
% Align the data with the HCP-MMP1.0 Atlas generated by Brainstorm
Labels_Atlas = cell(1, 360);
for j = 1:360
    Labels_Atlas{j} = selectBeforeSecondUnderscore(Atlas(iAtlas).Scouts(j).Label);
end

Labels_Tracts = parcelIDs;  
N = length(Labels_Atlas);

%% Correcting the Length of the Tracts Matrix

% Reference: Rosen BQ, Halgren E (2022) An estimation of the absolute number
% of axons indicates that human cortical areas are sparsely connected. PLoS
% Biol 20(3): e3001575. https://doi.org/10.1371/journal.pbio.3001575
disp ("-->> Correcting the Tracts Matrix by the Atlas");
corrected_tractLengths = zeros(N, N);
new_order = [];
for i = 1:360
    target_Atlas_label = Labels_Atlas{i};
    for j = 1:360
        if strcmpi(target_Atlas_label, Labels_Tracts{j})
            new_order = [new_order, j];
        end
    end
end

corrected_tractLengths = tractLengths(new_order, new_order);

%% Correcting the Connectivity Matrix
disp ("-->> Correcting the Connectivity Matrix by the Atlas");
Fpt = exp(Fpt);
Fpt = nulldiag(Fpt);
corrected_conn = Fpt(new_order, new_order);

%% Visualize the Tract and Connectivity Matrices in the ROI Space

figure(1);
colormap("hot");
subplot(3, 2, 1);
image(Fpt * 1240);
title('Original Connectivity Matrix');

subplot(3, 2, 2);
image(tractLengths);
title('Original Tract Lengths Matrix');

subplot(3, 2, 3);
image(corrected_conn * 1240);
title('Corrected Connectivity Matrix');

subplot(3, 2, 4);
image(corrected_tractLengths);
title('Corrected Tract Lengths Matrix');

%% Map the Tract and Connectivity Matrices to the Voxel Space
disp ("-->> Interpolating the Tracts and Connectivity Matrix to high resolution");
HCP_MMP1 = Atlas(iAtlas);
N_voxel = length(Curvature);
conn_8K = zeros(N_voxel, N_voxel);
tract_8K = zeros(N_voxel, N_voxel);

for i = 1:length(tractLengths)
    for j = i+1:length(tractLengths)
        if ~isequal(i, j)
            vertices_i = HCP_MMP1.Scouts(i).Vertices;
            vertices_j = HCP_MMP1.Scouts(j).Vertices;
            conn_8K(vertices_i, vertices_j) = corrected_conn(i, j);
            conn_8K(vertices_j, vertices_i) = corrected_conn(j, i);
            tract_8K(vertices_i, vertices_j) = corrected_tractLengths(i, j);
            tract_8K(vertices_j, vertices_i) = corrected_tractLengths(j, i);
        end
    end
end

%% Visualize the Tract and Connectivity Matrices in the Voxel Space

subplot(3, 2, 5);
image(conn_8K * 1200);
title('Corrected Connectivity Matrix in Voxel Space');

subplot(3, 2, 6);
image(tract_8K);
title('Corrected Tract Lengths Matrix in Voxel Space');

%% Correcting the Lead Field

HeadModel = load('Data\Lead_Field\headmodel_surf_openmeeg.mat');
[N_elec,~] = size(HeadModel.Gain);
Cdata = load('Data\Lead_Field\channel_10-20_19.mat');
labels = load('Data\Scalp_Density_Matrix\G5WWO4TYJMYA.mat');
labels = labels.data_struct.dnames;
disp ("-->> Removing Channels  by preprocessed EEG");
[Cdata_r, Gain] = remove_channels_by_preproc_data(labels, Cdata, HeadModel.Gain);
disp ("-->> Sorting Channels and LeadField by preprocessed EEG");
[Cdata_s, Gain] = sort_channels_by_preproc_data(labels, Cdata_r, Gain);

VertNormals= reshape(VertNormals,[1,N_voxel,3]);
VertNormals = repmat(VertNormals,[N_elec,1,1]);
Gain = reshape(Gain,N_elec,3,N_voxel);
Gain = permute(Gain,[1,3,2]);
Gain = sum(Gain.*VertNormals,3);

%% Save data

load('Data\Scalp_Density_Matrix\LFMDCR2HNVTQ.mat')
fmax = data_struct.fmax;
parameters.Data.Cross = data_struct.CrossM;
parameters.Data.freq = data_struct.freqrange;


parameters.Model.K = Gain;
parameters.Model.C = conn_8K;
parameters.Model.L = tract_8K;


parameters.Regularization = [10,10,10];

parameters.Dimensions.Ne = N_elec;
parameters.Dimensions.Nr = N_voxel;
parameters.Dimensions.Nw =  length(parameters.Data.freq);
filePath = 'Data\Model_Parameters\parameters.mat';
save(filePath,"parameters");

%% Delete Data
disp ("-->> Delete unnecesary data");

clear all 

% Compute the T_operator 
disp ("-->> Compute the T_operator for the inverse model");

load('Data\Model_Parameters\parameters.mat');
parameters = Teval(parameters);
filePath = 'Data\Model_Parameters\parameters.mat';
save(filePath,"parameters");
clear all 




