function parameters = preprocessing(properties)
 %% Preprocessing of the Data
%     Author: Ronald Garcia, Ariosky Areaces Gonzales, Pedro A. Valdes Sosa 
%     Create Time: 2024 
% Initialize workspace by clearing variables and closing figures

%%
%%  Tensor Field
%%
if(properties.general_params.tensor_field.default)
    % Download the Tensor Field files
    TF_path = fullfile(properties.general_params.tmp.path,'TensorField');
    if(~isfolder(TF_path))
        mkdir(TF_path);
    end
    filename = {'Tensor_Field_9.5ms.zip','Tensor_Field_11ms.zip'};    
    disp(strcat("-->> Downloading Tensor Field files......."));
    urls = properties.general_params.tensor_field.urls;
    for i=1:length(urls)
        url = urls{i};
        if(~isfolder(tmp_path,filename{i}))
            matlab.net.http.HTTPOptions.VerifyServerName = false;
            options = weboptions('Timeout',Inf,'RequestMethod','auto');
            downladed_file = websave(fullfile(TF_path,filename{i}),url,options);
            pause(1);
            %% Unzip lasted version
            disp(strcat("-->> Unziping files......."));
            exampleFiles = unzip(fullfile(TF_path,filename{i}),tmp_path);
            pause(1);
            delete(fullfile(TF_path,filename{i}));
        end
    end
else
    % Compute the Tensor Field

end

%% Reading Anatomical Data
disp('-->> Reading Anatomical Data')
Cortex  = load(properties.anatomy_params.cortex.file_name);
Lenghts  = load(properties.anatomy_params.neuroTracLengths.file_name);
Conn    = load(properties.anatomy_params.conn_anat.file_name);
delayM   = load(properties.anatomy_params.cond_delay.file_name);
Atlas   = Cortex.Atlas(Cortex.iAtlas);

% Align the data with the HCP-MMP1.0 Atlas generated by Brainstorm

Labels_Atlas = cell(1, length(Atlas.Scouts));
for j = 1:length(Atlas.Scouts)
    Labels_Atlas{j} = selectBeforeSecondUnderscore(Atlas.Scouts(j).Label);
end

Labels_Tracts = Lenghts.parcelIDs;  
Nr = length(Labels_Atlas);

%% Correcting the Length of the Tracts Matrix

% Reference: Rosen BQ, Halgren E (2022) An estimation of the absolute number
% of axons indicates that human cortical areas are sparsely connected. PLoS
% Biol 20(3): e3001575. https://doi.org/10.1371/journal.pbio.3001575

disp ("-->> Correcting the Tracts Lengths by the Atlas");
corrected_tractLengths = zeros(Nr, Nr);
new_order = [];
for i = 1:Nr
    target_Atlas_label = Labels_Atlas{i};
    for j = 1:Nr
        if strcmpi(target_Atlas_label, Labels_Tracts{j})
            new_order = [new_order, j];
        end
    end
end

corrected_tractLengths = Lenghts.tractLengths(new_order, new_order);

%% Correcting the Connectivity Matrix

disp ("-->> Correcting the Anatomical Connectivity by the Atlas");
Fpt = exp(Conn.Fpt);
Fpt = nulldiag(Fpt);
corrected_conn = Fpt(new_order, new_order);
corrected_conn = corrected_conn/norm(corrected_conn,'fro');
Fpt = Fpt/norm(Fpt,'fro');

%% Read and Correct Delay Matrix Between Neurotracts

%Lemaréchal JD, Jedynak M, Trebaul L, Boyer A, Tadel F, Bhattacharjee M, 
% Deman P, Tuyisenge V, Ayoubian L, Hugues E, Chanteloup-Forêt B, Saubat C,
% Zouglech R, Reyes Mejia GC, Tourbier S, Hagmann P, Adam C, Barba C, 
% Bartolomei F, Blauwblomme T, Curot J, Dubeau F, Francione S, Garcés M,
% Hirsch E, Landré E, Liu S, Maillard L, Metsähonkala EL, Mindruta I, Nica 
% A, Pail M, Petrescu AM, Rheims S, Rocamora R, Schulze-Bonhage A, Szurhaj 
% W, Taussig D, Valentin A, Wang H, Kahane P, George N, David O; F-TRACT 
% consortium. A brain atlas of axonal and synaptic delays based on modelling 
% of cortico-cortical evoked potentials. Brain. 2022 Jun 3;145(5):1653-1667. 
% doi: 10.1093/brain/awab362. PMID: 35416942; PMCID: PMC9166555.

Labels_TractsDelay = delayM.averageDelays_FTRACTS.parcelIDs;
disp ("-->> Correcting the Conduction Delays by the Atlas");
corrected_delay = zeros(Nr, Nr);
delay = delayM.averageDelays_FTRACTS.delays;
delay = delay(9:end,:);
new_order = [];
for i = 1:Nr
    target_Atlas_label = Labels_Atlas{i};
    for j = 1:Nr
        if strcmpi(target_Atlas_label, Labels_TractsDelay{j})
            new_order = [new_order, j];
        end
    end
end
corrected_delay= delay(new_order, new_order);

% Fill the nan entries such that the distribution its preseved 
%load('Data/Average_Velocity_ROISpace/GPfit_Delay_Mean.mat');
nonnan_corrected_delay=corrected_delay;
nan_indices = isnan(corrected_delay);
mean_delays_ms = 9.5;
speed_mm_per_ms = mean(mean(corrected_tractLengths(nan_indices)))/mean_delays_ms;
nonnan_corrected_delay(nan_indices) = corrected_tractLengths(nan_indices)/speed_mm_per_ms;
corrected_delay(nan_indices) = nonnan_corrected_delay(nan_indices) ;



%% Map the Tract and Connectivity Matrices to the Voxel Space

disp ("-->> Interpolating the Tracts and Connectivity Matrix to high resolution");
HCP_MMP1 = Atlas;
Nv = length(Cortex.Curvature);
conn_8K = zeros(Nv, Nv);
tract_8K = zeros(Nv, Nv);
delay_8K = zeros(Nv, Nv);

for i = 1:length(Lenghts.tractLengths)
    for j = i+1:length(Lenghts.tractLengths)
        if ~isequal(i, j)
            vertices_i = HCP_MMP1.Scouts(i).Vertices;
            vertices_j = HCP_MMP1.Scouts(j).Vertices;
            conn_8K(vertices_i, vertices_j) = corrected_conn(i, j);
            conn_8K(vertices_j, vertices_i) = corrected_conn(j, i);
            tract_8K(vertices_i, vertices_j) = corrected_tractLengths(i, j);
            tract_8K(vertices_j, vertices_i) = corrected_tractLengths(j, i);
            delay_8K(vertices_i, vertices_j) = nonnan_corrected_delay(i, j);
            delay_8K(vertices_j, vertices_i) = nonnan_corrected_delay(j, i);
        end
    end
end

% Calculate mean of non-zero elements and replace zeros for conn_8K
meanValue_conn = mean(mean(conn_8K(conn_8K ~= 0)));
conn_8K(conn_8K == 0) = meanValue_conn;

%Calculate mean of non-zero elements and replace zeros for tract_8K
meanValue_tract = mean(mean(tract_8K(tract_8K ~= 0)));
tract_8K(tract_8K == 0) = meanValue_tract;

%Calculate mean of non-zero elements and replace zeros for delay_8K
meanValue_delay = mean(mean(delay_8K(delay_8K ~= 0)));
delay_8K(delay_8K == 0) = meanValue_delay;

%% Symmetrizing the matrices 
conn_8K = nulldiag(sym_matrix(conn_8K));
tract_8K = nulldiag(sym_matrix(tract_8K));
delay_8K = nulldiag(sym_matrix(delay_8K));

%% Correcting the Lead Field

Leadfield = load(properties.anatomy_params.leadfield.file_name);
[Ne,~] = size(Leadfield.Gain);
Ne = Ne-1; % Average Reference
Cdata = load(properties.anatomy_params.channel.file_name);
labels = load('templates/labels_scalp.mat');
labels = labels.labels;
disp ("-->> Removing Channels  by preprocessed EEG");
[Cdata_r, Gain] = remove_channels_by_preproc_data(labels, Cdata, Leadfield.Gain);
disp ("-->> Sorting Channels and LeadField by preprocessed EEG");
[~, Gain] = sort_channels_by_preproc_data(labels, Cdata_r, Gain);

VertNormals= reshape(Cortex.VertNormals,[1,Nv,3]);
VertNormals = repmat(VertNormals,[Ne,1,1]);
Gain = reshape(Gain,Ne,3,Nv);
Gain = permute(Gain,[1,3,2]);
Gain = sum(Gain.*VertNormals,3);


%% Save Data


R  = voxel_roi_map(Cortex);

% Full Model of Spatio - Temporal Correlation on the Voxel Space
parameters.Model.K = Gain;    % Lead Field
parameters.Model.C =  conn_8K; % Anatomical Conenctivity
parameters.Model.L = tract_8K; % Length of the tracts
parameters.Model.D = delay_8K/1000; % delays in seconds 
parameters.Model.R = R;  % Projection matrix from Voxel to ROI space

% Compress Model  of Spatio - Temporal Correlations on the ROI Space
parameters.Compact_Model.K = Gain*R';    % Lead Field
parameters.Compact_Model.C = corrected_conn;  %  Anatomical Connectivity
parameters.Compact_Model.L = corrected_tractLengths; % Length of the Neurotracts
parameters.Compact_Model.D =corrected_delay/1000; % delays in seconds 
parameters.Compact_Model.R = R; 



% Model Dimensions
parameters.Dimensions.Ne = Ne;  % Number of electrodes 
parameters.Dimensions.Nr = Nr;  % Number of ROI's
parameters.Dimensions.Nv =Nv;   % Number of Voxels
parameters.Dimensions.Nw =  properties.general_params.data.nFreqs; % Number of frequencies

end

