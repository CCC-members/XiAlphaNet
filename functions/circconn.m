

load('Data\Atlas_Anatomical\tess_cortex_mid_high_8000V_fix.mat');
load('Data\Avarege_Conn&Tract_ROISpace\averageConnectivity_tractLengths.mat');
load('Data\Avarege_Conn&Tract_ROISpace\averageConnectivity_Fpt.mat');
%load('Data\Model_Parameters\parameters.mat');
load('Data\Average_Velocity_ROISpace\averageDelays_FTRACTS.mat')
% Align the data with the HCP-MMP1.0 Atlas generated by Brainstorm
Labels_Atlas = cell(1, 360);
for j = 1:360
    Labels_Atlas{j} = selectBeforeSecondUnderscore(Atlas(iAtlas).Scouts(j).Label);
end
% Set up the video writer
labels = Labels_Atlas;  % Labels of the areas (360 regions)

% Select 10 labels from each hemisphere
% Assuming the first 180 labels are from the left hemisphere, and the next 180 from the right
left_hemi_indices = 1:10;  % Select the first 10 from the left hemisphere
right_hemi_indices = 181:191;  % Select 10 from the right hemisphere

% Combine selected indices
selected_indices = [left_hemi_indices, right_hemi_indices];

% Filter the labels based on the selected indices
filtered_labels = labels(selected_indices);  % Take only the selected labels

% Set up the video writer
video_filename = 'circular_connectivity_video.avi';  % Name of the video file
v = VideoWriter(video_filename);
v.FrameRate = 5;  % Set frame rate (you can adjust as needed)
open(v);  % Open the video writer

% Generate the age array
ages = linspace(0, 100, 200);  % Corresponding ages from 0 to 100

% Find the global min and max across all V(:,:,j)
global_min = min(V(:));  % Minimum value in V across all frames
global_max = max(V(:));  % Maximum value in V across all frames

% Create a single figure to reuse and keep it visible
figure_handle = figure;  % Keep the figure visible

% Loop through the 200 time steps (age intervals)
for j = 1:200
    % Get the current connectivity matrix for the j-th age
    connectivity = V(:,:,j);  % 360x360 connectivity matrix
    
    % Filter the connectivity matrix based on the selected indices
    filtered_connectivity = connectivity(selected_indices, selected_indices);
    
    % Set up threshold for visualizing connectivity
    conn_threshold = 9;  % Lowered the threshold since values are not normalized
    
    % Prepare the connectivity data for circular graph plotting
    [row, col] = find(abs(filtered_connectivity) > conn_threshold);
    weights = filtered_connectivity(abs(filtered_connectivity) > conn_threshold);  % Get corresponding weights
    
    % Create an adjacency matrix for circularGraph
    adjacency_matrix = zeros(size(filtered_connectivity));
    for i = 1:length(row)
        adjacency_matrix(row(i), col(i)) = weights(i);  % Populate adjacency matrix with actual weights
    end
    
    % Clear the current figure and redraw the circular graph on the same figure
    clf(figure_handle);  % Clear the contents of the figure
    circularGraph(adjacency_matrix, 'Label', filtered_labels);  % Plot the circular graph
    title(['Circular Connectivity Diagram (Age: ', num2str(ages(j)), ' years)']);  % Use precomputed 'ages' array
    
    % Capture the frame and write it to the video
    frame = getframe(figure_handle);
    writeVideo(v, frame);
    
    % Pause briefly to ensure the frame is processed correctly
    pause(0.01);
end

% Close the video writer
close(v);

% Display message
disp(['Video saved as ', video_filename]);